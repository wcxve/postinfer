name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
    paths-ignore:
      - "docs/**"
      - "README.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "README.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install Python Dependencies
        run: |
          pip install -U pip
          pip install -U build twine

      - name: Build and Check Source Distribution
        run: |
          python -m build --sdist .
          python -m twine check --strict dist/*

      - name: Upload Source Distribution as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: postinfer
          path: dist/*

  tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: build
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        include:
          - name: Tests (Python 3.13 on Linux-x64)
            os: "ubuntu-latest"
            python-version: "3.13"
            uv-resolution: "highest"

          - name: Tests (Python 3.13 on macOS-arm64)
            os: "macos-latest"
            python-version: "3.13"
            uv-resolution: "highest"

          - name: Tests (Lowest Version Deps)
            os: "ubuntu-latest"
            python-version: "3.10"
            uv-resolution: "lowest-direct"
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Source Distribution
        uses: actions/download-artifact@v5
        with:
          name: postinfer

      - name: Install Python Dependencies
        run: |
          uv venv
          uv pip compile pyproject.toml \
            --output-file requirements.txt \
            --resolution ${{ matrix.uv-resolution }}
          uv pip install "$(ls postinfer-*.tar.gz)[test]" \
            --overrides requirements.txt \
            --verbose

      - name: Run Tests
        run: |
          pytest

      - name: Upload Test Results
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          file: junit.xml
          flags: "py${{ matrix.python-version }}"
          name: "Python ${{ matrix.python-version }}"
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

      - name: Upload Coverage Results
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [ build, tests ]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: PyPI
      url: https://pypi.org/p/postinfer
    permissions:
      id-token: write
    steps:
      - name: Download Source Distribution
        uses: actions/download-artifact@v5
        with:
          name: postinfer
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
